"""
Portal de Benef√≠cios KNN - API Principal.

Esta API permite que alunos da KNN Idiomas acessem promo√ß√µes exclusivas
de parceiros comerciais atrav√©s de um sistema de autentica√ß√£o seguro.
"""

import logging
import os
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from slowapi import _rate_limit_exceeded_handler
from slowapi.errors import RateLimitExceeded

from src.api import admin, employee, logos, partner, student, sync, users
from src.config import (
    API_DESCRIPTION,
    API_TITLE,
    API_VERSION,
    CORS_ORIGINS,
    DEBUG,
    ENVIRONMENT,
)
from src.db.firestore import initialize_firestore_databases
from src.db.storage import initialize_storage_client
from src.utils.rate_limit import limiter

# Configurar logging
logging.basicConfig(
    level=logging.INFO if DEBUG else logging.WARNING,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o."""
    # Startup
    logger.info(f"üöÄ Iniciando aplica√ß√£o em modo {ENVIRONMENT}")
    logger.info(f"üîß Debug mode: {DEBUG}")

    # Inicializar Firestore
    initialize_firestore_databases()

    # Inicializar Storage
    initialize_storage_client()

    logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso")

    yield

    # Shutdown
    logger.info("üõë Encerrando aplica√ß√£o")


app = FastAPI(
    title=API_TITLE,
    description=API_DESCRIPTION,
    version=API_VERSION,
    lifespan=lifespan,
)

# Middleware de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configurar rate limiter
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Incluir routers
app.include_router(admin.router, prefix=f"/{API_VERSION}/admin", tags=["Admin"])
app.include_router(
    employee.router, prefix=f"/{API_VERSION}/employee", tags=["Employee"]
)
app.include_router(logos.router, prefix=f"/{API_VERSION}/logos", tags=["Logos"])
app.include_router(partner.router, prefix=f"/{API_VERSION}/partner", tags=["Partner"])
app.include_router(student.router, prefix=f"/{API_VERSION}/student", tags=["Student"])
app.include_router(sync.router, prefix=f"/{API_VERSION}/sync", tags=["Sync"])
app.include_router(users.router, prefix=f"/{API_VERSION}/users", tags=["Users"])


@app.get("/")
async def root():
    """Endpoint raiz da API."""
    return {
        "message": "Portal de Benef√≠cios KNN API",
        "version": API_VERSION,
        "environment": ENVIRONMENT,
        "status": "running",
    }


@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de da API."""
    return {"status": "healthy", "environment": ENVIRONMENT}


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Handler global para exce√ß√µes n√£o tratadas."""
    logger.error(f"‚ùå Erro n√£o tratado: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": {
                "code": "INTERNAL_SERVER_ERROR",
                "msg": "Erro interno do servidor",
            }
        },
    )


if __name__ == "__main__":
    import uvicorn

    port = int(os.getenv("PORT", "8080"))
    uvicorn.run(
        "src.main:app",
        host="0.0.0.0",
        port=port,
        reload=True if ENVIRONMENT == "development" else False,
    )
