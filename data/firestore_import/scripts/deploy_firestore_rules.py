#!/usr/bin/env python3
"""
Script para deploy das regras de seguran√ßa do Firestore para o projeto knn-benefits.

Este script facilita o processo de deploy das regras de seguran√ßa,
valida√ß√£o e configura√ß√£o de √≠ndices para o banco de dados de produ√ß√£o.
"""

import subprocess
import sys
from pathlib import Path


def run_command(command, description):
    """Executa um comando e retorna o resultado."""
    print(f"\nüîÑ {description}...")
    print(f"Executando: {command}")

    try:
        result = subprocess.run(
            command, shell=True, capture_output=True, text=True, check=True
        )
        print(f"‚úÖ {description} - Sucesso")
        if result.stdout:
            print(f"Output: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro")
        print(f"Erro: {e.stderr}")
        return False


def check_prerequisites():
    """Verifica se os pr√©-requisitos est√£o instalados."""
    print("üîç Verificando pr√©-requisitos...")

    # Verificar se Firebase CLI est√° instalado
    try:
        result = subprocess.run(
            "firebase --version", shell=True, capture_output=True, text=True, check=True
        )
        print(f"‚úÖ Firebase CLI instalado: {result.stdout.strip()}")
    except subprocess.CalledProcessError:
        print("‚ùå Firebase CLI n√£o encontrado")
        print("Instale com: npm install -g firebase-tools")
        return False

    # Verificar se os arquivos de regras existem
    rules_file = Path("firestore_rules_production.rules")
    if not rules_file.exists():
        print(f"‚ùå Arquivo de regras n√£o encontrado: {rules_file}")
        return False
    print(f"‚úÖ Arquivo de regras encontrado: {rules_file}")

    # Verificar se o arquivo de √≠ndices existe
    indexes_file = Path("firestore.indexes.json")
    if not indexes_file.exists():
        print(f"‚ùå Arquivo de √≠ndices n√£o encontrado: {indexes_file}")
        return False
    print(f"‚úÖ Arquivo de √≠ndices encontrado: {indexes_file}")

    return True


def login_firebase():
    """Faz login no Firebase se necess√°rio."""
    print("\nüîê Verificando autentica√ß√£o Firebase...")

    # Verificar se j√° est√° logado
    try:
        result = subprocess.run(
            "firebase projects:list",
            shell=True,
            capture_output=True,
            text=True,
            check=True,
        )
        if "knn-benefits" in result.stdout:
            print("‚úÖ J√° autenticado e projeto knn-benefits encontrado")
            return True
        else:
            print("‚ö†Ô∏è Autenticado mas projeto knn-benefits n√£o encontrado")
            print("Verifique se voc√™ tem acesso ao projeto knn-benefits")
            return False
    except subprocess.CalledProcessError:
        print("‚ùå N√£o autenticado")
        print("Execute: firebase login")
        return False


def test_rules():
    """Testa as regras de seguran√ßa antes do deploy."""
    print("\nüß™ Testando regras de seguran√ßa...")

    # Criar arquivo de teste b√°sico se n√£o existir
    test_file = Path("firestore_rules_test.spec.js")
    if not test_file.exists():
        test_content = """
const { assertFails, assertSucceeds, initializeTestEnvironment } = require('@firebase/rules-unit-testing');

describe('Firestore Security Rules', () => {
  let testEnv;

  beforeAll(async () => {
    testEnv = await initializeTestEnvironment({
      projectId: 'knn-benefits-test',
      firestore: {
        rules: require('fs').readFileSync('firestore_rules_production.rules', 'utf8'),
      },
    });
  });

  afterAll(async () => {
    await testEnv.cleanup();
  });

  test('Usu√°rio n√£o autenticado n√£o pode ler dados', async () => {
    const unauthedDb = testEnv.unauthenticatedContext().firestore();
    await assertFails(unauthedDb.collection('students').doc('test').get());
  });

  test('Admin pode ler dados', async () => {
    const adminDb = testEnv.authenticatedContext('admin', {
      role: 'admin',
      tenant_id: 'knn-benefits-tenant'
    }).firestore();

    // Este teste pode falhar se n√£o houver dados, mas a regra deve permitir
    try {
      await adminDb.collection('students').limit(1).get();
    } catch (error) {
      // Ignorar erros de dados n√£o encontrados
      if (!error.message.includes('not found')) {
        throw error;
      }
    }
  });
});
"""
        with open(test_file, "w", encoding="utf-8") as f:
            f.write(test_content)
        print(f"‚úÖ Arquivo de teste criado: {test_file}")

    # Executar testes (se dispon√≠vel)
    return run_command(
        "firebase emulators:exec --only firestore 'npm test' --project=knn-benefits",
        "Executando testes das regras",
    )


def deploy_rules():
    """Faz deploy das regras de seguran√ßa."""
    print("\nüöÄ Fazendo deploy das regras de seguran√ßa...")

    return run_command(
        "firebase deploy --only firestore:rules --project=knn-benefits",
        "Deploy das regras de seguran√ßa",
    )


def deploy_indexes():
    """Faz deploy dos √≠ndices."""
    print("\nüìä Fazendo deploy dos √≠ndices...")

    return run_command(
        "firebase deploy --only firestore:indexes --project=knn-benefits",
        "Deploy dos √≠ndices",
    )


def validate_deployment():
    """Valida se o deploy foi bem-sucedido."""
    print("\n‚úÖ Validando deployment...")

    # Verificar se as regras est√£o ativas
    return run_command(
        "firebase firestore:rules:get --project=knn-benefits",
        "Verificando regras ativas",
    )


def main():
    """Fun√ß√£o principal."""
    print("üî• Deploy das Regras de Seguran√ßa do Firestore - knn-benefits")
    print("=" * 60)

    # Verificar pr√©-requisitos
    if not check_prerequisites():
        print("\n‚ùå Pr√©-requisitos n√£o atendidos. Abortando.")
        sys.exit(1)

    # Verificar autentica√ß√£o
    if not login_firebase():
        print("\n‚ùå Problema de autentica√ß√£o. Abortando.")
        sys.exit(1)

    # Perguntar confirma√ß√£o
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a fazer deploy das regras de seguran√ßa")
    print("   para o ambiente de PRODU√á√ÉO (knn-benefits).")
    print("   Isso pode afetar o acesso aos dados em produ√ß√£o.")

    confirm = input("\nDeseja continuar? (digite 'CONFIRMO' para prosseguir): ")
    if confirm != "CONFIRMO":
        print("\n‚ùå Deploy cancelado pelo usu√°rio.")
        sys.exit(0)

    # Testar regras (opcional)
    test_choice = input("\nDeseja executar testes das regras antes do deploy? (s/N): ")
    if test_choice.lower() in ["s", "sim", "y", "yes"]:
        if not test_rules():
            print("\n‚ö†Ô∏è Testes falharam. Deseja continuar mesmo assim?")
            continue_choice = input("Continuar? (s/N): ")
            if continue_choice.lower() not in ["s", "sim", "y", "yes"]:
                print("\n‚ùå Deploy cancelado devido a falhas nos testes.")
                sys.exit(1)

    # Deploy das regras
    if not deploy_rules():
        print("\n‚ùå Falha no deploy das regras. Abortando.")
        sys.exit(1)

    # Deploy dos √≠ndices
    if not deploy_indexes():
        print("\n‚ö†Ô∏è Falha no deploy dos √≠ndices, mas regras foram aplicadas.")
        print("   Voc√™ pode tentar fazer deploy dos √≠ndices separadamente.")

    # Validar deployment
    validate_deployment()

    print("\nüéâ Deploy conclu√≠do com sucesso!")
    print("\nüìã Pr√≥ximos passos recomendados:")
    print("   1. Verificar logs no Firebase Console")
    print("   2. Testar opera√ß√µes cr√≠ticas da aplica√ß√£o")
    print("   3. Monitorar m√©tricas de seguran√ßa por 24h")
    print("   4. Documentar mudan√ßas implementadas")

    print("\nüîó Links √∫teis:")
    print("   Console: https://console.firebase.google.com/project/knn-benefits")
    print(
        "   Regras: https://console.firebase.google.com/project/knn-benefits/firestore/rules"
    )
    print(
        "   √çndices: https://console.firebase.google.com/project/knn-benefits/firestore/indexes"
    )


if __name__ == "__main__":
    main()