#!/usr/bin/env python3
"""
Script para listar os bancos de dados Firestore dispon√≠veis
"""

import os

import firebase_admin
from firebase_admin import credentials, firestore
from google.cloud import firestore as gcs_firestore
from google.oauth2 import service_account


def test_firestore_connection(project_id, service_account_path):
    """
    Testa a conex√£o com o Firestore e verifica se consegue acessar o banco

    Args:
        project_id (str): ID do projeto Firebase/GCP
        service_account_path (str): Caminho para o arquivo de chave da conta de servi√ßo

    Returns:
        dict: Informa√ß√µes sobre a conex√£o e banco de dados
    """
    try:
        print(f"üîç Testando conex√£o Firestore para o projeto: {project_id}")
        print(f"üîë Usando chave: {os.path.basename(service_account_path)}")
        print("=" * 60)

        # M√©todo 1: Usando Firebase Admin SDK
        try:
            # Limpar apps existentes
            try:
                firebase_admin.delete_app(firebase_admin.get_app())
            except ValueError:
                pass  # Nenhum app para deletar

            cred = credentials.Certificate(service_account_path)
            app = firebase_admin.initialize_app(cred, {
                'projectId': project_id
            })

            db = firestore.client()

            # Tentar listar cole√ß√µes (isso confirma que temos acesso)
            collections = db.collections()
            collection_names = []

            print("üìö Cole√ß√µes encontradas:")
            for collection in collections:
                collection_names.append(collection.id)
                print(f"   - {collection.id}")

            if not collection_names:
                print("   (Nenhuma cole√ß√£o encontrada - banco vazio ou sem permiss√µes de leitura)")

            result = {
                'status': 'success',
                'project_id': project_id,
                'database_id': '(default)',  # Firebase Admin sempre usa o banco padr√£o
                'collections': collection_names,
                'method': 'Firebase Admin SDK'
            }

            firebase_admin.delete_app(app)
            return result

        except Exception as firebase_error:
            print(f"‚ùå Erro com Firebase Admin SDK: {str(firebase_error)}")

            # M√©todo 2: Usando Google Cloud Firestore diretamente
            try:
                credentials_obj = service_account.Credentials.from_service_account_file(
                    service_account_path,
                    scopes=['https://www.googleapis.com/auth/cloud-platform']
                )

                client = gcs_firestore.Client(
                    project=project_id,
                    credentials=credentials_obj
                )

                # Tentar listar cole√ß√µes
                collections = client.collections()
                collection_names = []

                print("üìö Cole√ß√µes encontradas (Google Cloud SDK):")
                for collection in collections:
                    collection_names.append(collection.id)
                    print(f"   - {collection.id}")

                if not collection_names:
                    print("   (Nenhuma cole√ß√£o encontrada - banco vazio ou sem permiss√µes de leitura)")

                return {
                    'status': 'success',
                    'project_id': project_id,
                    'database_id': '(default)',
                    'collections': collection_names,
                    'method': 'Google Cloud SDK'
                }

            except Exception as gcs_error:
                print(f"‚ùå Erro com Google Cloud SDK: {str(gcs_error)}")

                return {
                    'status': 'error',
                    'project_id': project_id,
                    'firebase_error': str(firebase_error),
                    'gcs_error': str(gcs_error)
                }

    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
        return {
            'status': 'error',
            'project_id': project_id,
            'error': str(e)
        }

def main():
    """
    Fun√ß√£o principal - testa conex√£o com Firestore para ambos os projetos
    """
    # Configura√ß√µes dos projetos
    projects = [
        {
            'name': 'knn-portal-dev (Default)',
            'project_id': 'knn-portal-dev',
            'service_account': 'default-service-account-key.json'
        },
        {
            'name': 'knn-benefits (Production)',
            'project_id': 'knn-benefits',
            'service_account': 'knn-benefits-service-account-key.json'
        }
    ]

    all_results = {}

    for project in projects:
        print(f"\n{'='*80}")
        print(f"üöÄ PROJETO: {project['name']}")
        print(f"{'='*80}")

        service_account_path = os.path.join(os.path.dirname(__file__), project['service_account'])

        if not os.path.exists(service_account_path):
            print(f"‚ùå Arquivo de chave n√£o encontrado: {service_account_path}")
            all_results[project['project_id']] = {
                'status': 'error',
                'error': 'Arquivo de chave n√£o encontrado'
            }
            continue

        result = test_firestore_connection(project['project_id'], service_account_path)
        all_results[project['project_id']] = result

        if result['status'] == 'success':
            print("‚úÖ Conex√£o bem-sucedida!")
            print(f"   üìä Banco: {result['database_id']}")
            print(f"   üìö Cole√ß√µes: {len(result['collections'])}")
            print(f"   üîß M√©todo: {result['method']}")
        else:
            print("‚ùå Falha na conex√£o")

    # Resumo final
    print(f"\n{'='*80}")
    print("üìã RESUMO FINAL - BANCOS DE DADOS FIRESTORE")
    print(f"{'='*80}")

    for project_id, result in all_results.items():
        if result['status'] == 'success':
            print(f"‚úÖ {project_id}:")
            print(f"   üìä Banco de dados: {result['database_id']}")
            print(f"   üìö Cole√ß√µes ({len(result['collections'])}): {', '.join(result['collections']) if result['collections'] else 'Nenhuma'}")
            print(f"   üîß M√©todo de acesso: {result['method']}")
        else:
            print(f"‚ùå {project_id}: Falha na conex√£o")
            if 'error' in result:
                print(f"   üö´ Erro: {result['error']}")
            if 'firebase_error' in result:
                print(f"   üî• Firebase: {result['firebase_error']}")
            if 'gcs_error' in result:
                print(f"   ‚òÅÔ∏è  GCS: {result['gcs_error']}")
        print()

    # Informa√ß√µes adicionais sobre bancos de dados Firestore
    print("‚ÑπÔ∏è  INFORMA√á√ïES SOBRE BANCOS DE DADOS FIRESTORE:")
    print("   ‚Ä¢ Cada projeto Firebase/GCP tem um banco Firestore padr√£o chamado '(default)'")
    print("   ‚Ä¢ √â poss√≠vel criar bancos adicionais, mas isso requer configura√ß√£o espec√≠fica")
    print("   ‚Ä¢ O banco '(default)' √© criado automaticamente quando voc√™ usa o Firestore")
    print("   ‚Ä¢ As cole√ß√µes listadas s√£o as que existem no banco e s√£o acess√≠veis com as credenciais fornecidas")

    print("\n‚úÖ An√°lise de bancos de dados conclu√≠da!")

if __name__ == "__main__":
    main()
