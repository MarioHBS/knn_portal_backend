#!/usr/bin/env python3
"""
Script para verificar se os usu√°rios do Firestore existem no Firebase Authentication.
"""

import os
import sys

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

import firebase_admin
from firebase_admin import auth, credentials, firestore


def verify_auth_sync():
    """
    Verifica se todos os usu√°rios do Firestore existem no Firebase Authentication.
    """
    try:
        # Inicializar Firebase se n√£o estiver inicializado
        if not firebase_admin._apps:
            try:
                cred = credentials.ApplicationDefault()
                firebase_admin.initialize_app(cred)
                print("‚úÖ Firebase inicializado com credenciais padr√£o")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro com credenciais padr√£o: {e}")
                firebase_admin.initialize_app()
                print("‚úÖ Firebase inicializado sem credenciais")

        db = firestore.client()
        print("‚úÖ Cliente Firestore criado")

        print("\n=== VERIFICANDO SINCRONIZA√á√ÉO FIRESTORE <-> AUTHENTICATION ===")

        # Obter todos os usu√°rios do Firestore
        users_ref = db.collection("users")
        firestore_users = users_ref.stream()

        firestore_user_list = []
        for doc in firestore_users:
            user_data = doc.to_dict()
            firestore_user_list.append(
                {
                    "uid": doc.id,
                    "name": user_data.get("name", "N/A"),
                    "email": user_data.get("e-mail", user_data.get("email", "N/A")),
                    "role": user_data.get("role", "N/A"),
                    "tenant_id": user_data.get(
                        "tenant_id", user_data.get("tenant", "N/A")
                    ),
                    "firebase_uid": user_data.get("firebase_uid", doc.id),
                }
            )

        print(f"üìä Total de usu√°rios no Firestore: {len(firestore_user_list)}")

        # Verificar cada usu√°rio no Firebase Authentication
        sync_results = {"synced": [], "not_in_auth": [], "auth_errors": []}

        print("\nüîç VERIFICANDO CADA USU√ÅRIO NO FIREBASE AUTHENTICATION...\n")

        for user in firestore_user_list:
            uid = user["firebase_uid"] if user["firebase_uid"] != "N/A" else user["uid"]

            try:
                # Tentar obter o usu√°rio do Firebase Authentication
                auth_user = auth.get_user(uid)

                print(f"‚úÖ SINCRONIZADO: {uid}")
                print(f"   Nome Firestore: {user['name']}")
                print(f"   Email Firestore: {user['email']}")
                print(f"   Role: {user['role']}")
                print(f"   Tenant: {user['tenant_id']}")
                print(f"   Email Authentication: {auth_user.email}")
                print(f"   Verificado: {auth_user.email_verified}")
                print(f"   Criado em: {auth_user.user_metadata.creation_timestamp}")
                print(
                    f"   √öltimo login: {auth_user.user_metadata.last_sign_in_timestamp}"
                )

                # Verificar se os emails coincidem
                firestore_email = user["email"]
                auth_email = auth_user.email or "N/A"

                if firestore_email != "N/A" and auth_email != "N/A":
                    if firestore_email.lower() != auth_email.lower():
                        print("   ‚ö†Ô∏è  ATEN√á√ÉO: Emails diferentes!")
                        print(f"      Firestore: {firestore_email}")
                        print(f"      Auth: {auth_email}")

                sync_results["synced"].append(
                    {
                        "uid": uid,
                        "firestore_data": user,
                        "auth_data": {
                            "email": auth_user.email,
                            "email_verified": auth_user.email_verified,
                            "creation_timestamp": auth_user.user_metadata.creation_timestamp,
                            "last_sign_in_timestamp": auth_user.user_metadata.last_sign_in_timestamp,
                        },
                    }
                )

            except auth.UserNotFoundError:
                print(f"‚ùå N√ÉO ENCONTRADO NO AUTHENTICATION: {uid}")
                print(f"   Nome: {user['name']}")
                print(f"   Email: {user['email']}")
                print(f"   Role: {user['role']}")
                print(
                    "   ‚ö†Ô∏è  Este usu√°rio existe no Firestore mas n√£o no Authentication!"
                )

                sync_results["not_in_auth"].append(user)

            except Exception as e:
                print(f"‚ö†Ô∏è  ERRO AO VERIFICAR: {uid}")
                print(f"   Erro: {str(e)}")
                print(f"   Nome: {user['name']}")
                print(f"   Email: {user['email']}")

                sync_results["auth_errors"].append(
                    {"uid": uid, "error": str(e), "user_data": user}
                )

            print()

        # Resumo final
        print("=" * 80)
        print("üìä RESUMO DA VERIFICA√á√ÉO DE SINCRONIZA√á√ÉO")
        print("=" * 80)

        total_users = len(firestore_user_list)
        synced_count = len(sync_results["synced"])
        not_in_auth_count = len(sync_results["not_in_auth"])
        error_count = len(sync_results["auth_errors"])

        print(f"üìà Total de usu√°rios no Firestore: {total_users}")
        print(f"‚úÖ Sincronizados corretamente: {synced_count}")
        print(f"‚ùå N√£o encontrados no Authentication: {not_in_auth_count}")
        print(f"‚ö†Ô∏è  Erros durante verifica√ß√£o: {error_count}")

        sync_percentage = (synced_count / total_users * 100) if total_users > 0 else 0
        print(f"üìä Taxa de sincroniza√ß√£o: {sync_percentage:.1f}%")

        if sync_percentage == 100:
            print("\nüéâ EXCELENTE! Todos os usu√°rios est√£o sincronizados!")
        elif sync_percentage >= 80:
            print("\n‚úÖ BOM! A maioria dos usu√°rios est√° sincronizada.")
        else:
            print("\n‚ö†Ô∏è  ATEN√á√ÉO! H√° problemas significativos de sincroniza√ß√£o.")

        # Detalhes dos problemas
        if not_in_auth_count > 0:
            print("\n‚ùå USU√ÅRIOS N√ÉO ENCONTRADOS NO AUTHENTICATION:")
            for user in sync_results["not_in_auth"]:
                print(
                    f"   - {user['uid']}: {user['name']} ({user['email']}) - Role: {user['role']}"
                )

        if error_count > 0:
            print("\n‚ö†Ô∏è  ERROS DURANTE VERIFICA√á√ÉO:")
            for error_info in sync_results["auth_errors"]:
                print(f"   - {error_info['uid']}: {error_info['error']}")

        # Recomenda√ß√µes
        print("\nüí° RECOMENDA√á√ïES:")
        if not_in_auth_count > 0:
            print("   1. Criar usu√°rios faltantes no Firebase Authentication")
            print("   2. Ou remover registros √≥rf√£os do Firestore")

        if error_count > 0:
            print("   3. Investigar erros de permiss√£o ou conectividade")

        if sync_percentage == 100:
            print("   ‚úÖ Sistema est√° sincronizado - nenhuma a√ß√£o necess√°ria")

        return sync_results

    except Exception as e:
        print(f"‚ùå Erro geral durante verifica√ß√£o: {e}")
        return None


if __name__ == "__main__":
    print("üîç VERIFICA√á√ÉO DE SINCRONIZA√á√ÉO FIRESTORE <-> AUTHENTICATION")
    print("=" * 80)

    result = verify_auth_sync()

    print("\n" + "=" * 80)
    print("‚úÖ Verifica√ß√£o conclu√≠da!")

    if result:
        total_synced = len(result["synced"])
        total_issues = len(result["not_in_auth"]) + len(result["auth_errors"])

        if total_issues == 0:
            print(
                f"üéâ Todos os {total_synced} usu√°rios est√£o perfeitamente sincronizados!"
            )
        else:
            print(
                f"‚ö†Ô∏è  {total_synced} usu√°rios sincronizados, {total_issues} com problemas."
            )
    else:
        print("‚ùå Falha na verifica√ß√£o - verifique as credenciais e conectividade.")