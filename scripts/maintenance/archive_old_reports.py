#!/usr/bin/env python3
"""
Script para arquivar relat√≥rios antigos

Este script move relat√≥rios com mais de 30 dias do diret√≥rio /reports/
para o diret√≥rio /docs/archive/ para manter a organiza√ß√£o.

Autor: Sistema de Manuten√ß√£o
Data: 2025-08-09
"""

import shutil
from datetime import datetime, timedelta
from pathlib import Path


def archive_old_reports(days_threshold: int = 30):
    """
    Move relat√≥rios antigos para o diret√≥rio de arquivo

    Args:
        days_threshold: N√∫mero de dias para considerar um relat√≥rio como antigo
    """
    # Diret√≥rios
    reports_dir = Path(
        "p:/ProjectsWEB/PRODUCAO/KNN PROJECT/knn_portal_journey_club_backend/reports"
    )
    archive_dir = Path(
        "p:/ProjectsWEB/PRODUCAO/KNN PROJECT/knn_portal_journey_club_backend/docs/archive"
    )

    # Criar diret√≥rio de arquivo se n√£o existir
    archive_dir.mkdir(parents=True, exist_ok=True)

    # Data limite
    cutoff_date = datetime.now() - timedelta(days=days_threshold)

    # Contadores
    moved_count = 0
    total_count = 0

    print(f"üóÇÔ∏è  Arquivando relat√≥rios com mais de {days_threshold} dias...")
    print(f"üìÖ Data limite: {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÅ Origem: {reports_dir}")
    print(f"üìÅ Destino: {archive_dir}")
    print("-" * 60)

    # Verificar se o diret√≥rio de relat√≥rios existe
    if not reports_dir.exists():
        print(f"‚ùå Diret√≥rio de relat√≥rios n√£o encontrado: {reports_dir}")
        return

    # Processar arquivos de relat√≥rio
    for file_path in reports_dir.iterdir():
        if file_path.is_file() and (
            file_path.suffix in [".md", ".json", ".txt", ".html"]
            and any(
                keyword in file_path.name.lower()
                for keyword in ["report", "relatorio", "migration", "test_", "upload_"]
            )
        ):
            total_count += 1

            # Verificar data de modifica√ß√£o
            file_mtime = datetime.fromtimestamp(file_path.stat().st_mtime)

            if file_mtime < cutoff_date:
                try:
                    # Mover arquivo para o diret√≥rio de arquivo
                    destination = archive_dir / file_path.name

                    # Se arquivo j√° existe no destino, adicionar timestamp
                    if destination.exists():
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        stem = destination.stem
                        suffix = destination.suffix
                        destination = archive_dir / f"{stem}_{timestamp}{suffix}"

                    shutil.move(str(file_path), str(destination))
                    moved_count += 1

                    print(f"‚úÖ Movido: {file_path.name} -> {destination.name}")

                except Exception as e:
                    print(f"‚ùå Erro ao mover {file_path.name}: {e}")
            else:
                print(
                    f"‚è≠Ô∏è  Mantido: {file_path.name} (modificado em {file_mtime.strftime('%Y-%m-%d')})"
                )

    print("-" * 60)
    print("üìä Resumo:")
    print(f"   ‚Ä¢ Total de relat√≥rios encontrados: {total_count}")
    print(f"   ‚Ä¢ Relat√≥rios arquivados: {moved_count}")
    print(f"   ‚Ä¢ Relat√≥rios mantidos: {total_count - moved_count}")

    if moved_count > 0:
        print(
            f"\n‚ú® Arquivamento conclu√≠do! {moved_count} relat√≥rios foram movidos para {archive_dir}"
        )
    else:
        print("\nüí° Nenhum relat√≥rio antigo encontrado para arquivar.")


def main():
    """
    Fun√ß√£o principal
    """
    print("üóÉÔ∏è  Script de Arquivamento de Relat√≥rios")
    print("=" * 60)

    try:
        archive_old_reports()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro durante o arquivamento: {e}")


if __name__ == "__main__":
    main()
