name: CI - Integração Contínua

on:
  push:
    branches: [ master, develop, test_mode ]
  pull_request:
    branches: [ master, develop ]

jobs:
  lint:
    name: Linting e Formatação
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Configurar Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache de dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock

    - name: Executar Ruff (linting)
      run: |
        ruff check src/ tests/ --output-format=github

    - name: Verificar formatação com Ruff
      run: |
        ruff format --check src/ tests/

  test:
    name: Testes Automatizados
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache de dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}

    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock pytest-cov

    - name: Executar testes com cobertura
      env:
        TESTING_MODE: true
        FIREBASE_PROJECT_ID: knn-benefits
        POSTGRES_URL: postgresql://test:test@localhost:5432/test
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload da cobertura para Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.13'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Executar análise de segurança com Bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload dos resultados de segurança
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  docs:
    name: Validação de Documentação
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Instalar markdownlint
      run: npm install -g markdownlint-cli

    - name: Validar arquivos Markdown
      run: markdownlint docs/ README.md TODO_BACKEND.md

    - name: Validar OpenAPI
      run: |
        pip install openapi-spec-validator
        openapi-spec-validator openapi.yaml
